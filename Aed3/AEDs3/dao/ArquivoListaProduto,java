package dao;

import base.Arquivo;
import model.ListaProduto;
import model.ChaveListaProduto;
import index.ArvoreBMais;
import java.util.ArrayList;

public class ArquivoListaProduto extends Arquivo<ListaProduto> {
    
    private ArvoreBMais<ChaveListaProduto> arvorePorLista;
    private ArvoreBMais<ChaveListaProduto> arvorePorProduto;

    public ArquivoListaProduto(String nomeArquivo) throws Exception {
        super(nomeArquivo, ListaProduto.class.getConstructor());
        
        // Inicializa árvores B+
        this.arvorePorLista = new ArvoreBMais<>(
            ChaveListaProduto.class.getConstructor(), 
            5, 
            nomeArquivo + "_porLista.db"
        );
        
        this.arvorePorProduto = new ArvoreBMais<>(
            ChaveListaProduto.class.getConstructor(), 
            5, 
            nomeArquivo + "_porProduto.db"
        );
    }

    @Override
    public int create(ListaProduto obj) throws Exception {
        // Verifica se a associação já existe
        if (associacaoExiste(obj.getIdLista(), obj.getIdProduto())) {
            throw new Exception("Produto já está associado a esta lista");
        }
        
        int id = super.create(obj);
        
        // Atualiza índices
        arvorePorLista.create(new ChaveListaProduto(obj.getIdLista(), id));
        arvorePorProduto.create(new ChaveListaProduto(obj.getIdProduto(), id));
        
        return id;
    }

    @Override
    public boolean delete(int id) throws Exception {
        ListaProduto lp = super.read(id);
        if (lp != null) {
            // Remove dos índices
            arvorePorLista.delete(new ChaveListaProduto(lp.getIdLista(), id));
            arvorePorProduto.delete(new ChaveListaProduto(lp.getIdProduto(), id));
            
            return super.delete(id);
        }
        return false;
    }

    @Override
    public boolean update(ListaProduto obj) throws Exception {
        ListaProduto existente = super.read(obj.getId());
        if (existente != null) {
            // Se mudou lista ou produto, precisa atualizar índices
            if (existente.getIdLista() != obj.getIdLista() || 
                existente.getIdProduto() != obj.getIdProduto()) {
                
                // Remove índices antigos
                arvorePorLista.delete(new ChaveListaProduto(existente.getIdLista(), obj.getId()));
                arvorePorProduto.delete(new ChaveListaProduto(existente.getIdProduto(), obj.getId()));
                
                // Adiciona novos índices
                arvorePorLista.create(new ChaveListaProduto(obj.getIdLista(), obj.getId()));
                arvorePorProduto.create(new ChaveListaProduto(obj.getIdProduto(), obj.getId()));
            }
            
            return super.update(obj);
        }
        return false;
    }

    // Métodos de consulta
    public ArrayList<ListaProduto> getProdutosPorLista(int idLista) throws Exception {
        ArrayList<ChaveListaProduto> chaves = arvorePorLista.read(new ChaveListaProduto(idLista, -1));
        ArrayList<ListaProduto> resultados = new ArrayList<>();
        
        for (ChaveListaProduto chave : chaves) {
            ListaProduto lp = super.read(chave.getChaveSecundaria());
            if (lp != null) {
                resultados.add(lp);
            }
        }
        
        return resultados;
    }

    public ArrayList<ListaProduto> getListasPorProduto(int idProduto) throws Exception {
        ArrayList<ChaveListaProduto> chaves = arvorePorProduto.read(new ChaveListaProduto(idProduto, -1));
        ArrayList<ListaProduto> resultados = new ArrayList<>();
        
        for (ChaveListaProduto chave : chaves) {
            ListaProduto lp = super.read(chave.getChaveSecundaria());
            if (lp != null) {
                resultados.add(lp);
            }
        }
        
        return resultados;
    }

    private boolean associacaoExiste(int idLista, int idProduto) throws Exception {
        ArrayList<ListaProduto> associacoes = getProdutosPorLista(idLista);
        for (ListaProduto lp : associacoes) {
            if (lp.getIdProduto() == idProduto) {
                return true;
            }
        }
        return false;
    }
}